entrypoints Module;
entrypoints Expr;

layout "where";
layout "field";
layout "postulate";

Module. Module ::= "module" Name Params "where" "{" [Decl] "}";

position token Name (((letter | '_') (letter | digit | '-' | '\'' | '_')*) | {"{!!}"}) ;

Qual.    QName ::= QName "." Name;
NotQual. QName ::= Name;

separator Decl ";";

TypeSig.    Decl  ::= TypeSig;
FunDef.     Decl  ::= Name [Pattern] FunDefBody;
Data.       Decl  ::= "data" Name Params DataBody;
Record.     Decl  ::= "record" Name Params RecordBody;
OpenImport. Decl  ::= "open" "import" Import [OpenSpec];
OpenApp.    Decl  ::= "open" Import [OpenSpec];
Import.     Decl  ::= "import" Import;
ModuleApp.  Decl  ::= "module" Name "=" Import;
Postulate.  Decl  ::= "postulate" "{" [TypeSig] "}";
Module_.    Decl  ::= Module;
Pragma.     Decl  ::= "{-@AGDA-}";

separator OpenSpec ""; 

Public. OpenSpec ::= "public" ;

separator TypeSig ";";

ImportNoArgs. Import ::= QName;
ImportArgs.   Import ::= QName [Arg];

Sig. TypeSig ::= Name ":" Expr;

Where.   Where ::= "where" "{" [Decl] "}";
NoWhere. Where ::= ;

NoParams.  Params ::= ;
ParamDecl. Params ::= [Binding];
ParamDef.  Params ::= [HiddenName];

NotHidden. HiddenName ::= Name;
Hidden.    HiddenName ::= "{" Name "}";
separator nonempty HiddenName "";

DataDecl.    DataBody ::= ":" Name;
DataDef.     DataBody ::= "where" Constrs;
DataDeclDef. DataBody ::= ":" Name "where" Constrs;

Constrs.     Constrs  ::= "{" [Constr] "}"; 
NoConstrs.   Constrs  ::= "{" "{-@EMPTY-}" "}"; 

RecordDecl.    RecordBody ::= ":" Name;
RecordDef.     RecordBody ::= "where" "{" "constructor" Name Fields "}";
RecordDeclDef. RecordBody ::= ":" Name "where" "{" "constructor" Name Fields "}";

NoFields. Fields ::= ;
Fields.   Fields ::= ";" "field" "{" [Constr] "}";

Constr. Constr ::= Name ":" Expr;
separator Constr ";";

FunDefNoBody. FunDefBody ::= ;
FunDefBody.   FunDefBody ::= "=" Expr Where;

Tel. Telescope ::= [Binding];

Bind.  Binding ::= "(" [Arg] ":" Expr ")";
HBind. Binding ::= "{" [Arg] ":" Expr "}";
separator nonempty Binding "";

Lam.  Expr  ::= "\\" [Name] "->" Expr;
Pi.   Expr  ::= Telescope "->" Expr;
Fun.  Expr  ::= Expr1 "->" Expr;
_.    Expr  ::= Expr1;
Eq.   Expr1 ::= Expr2 "==" Expr2;
_.    Expr1 ::= Expr2;
App.  Expr2 ::= [Arg];
_.    Expr3 ::= "(" Expr ")";
Id.   Expr3 ::= QName;

HArg. Arg ::= "{" Expr "}";
Arg.  Arg ::= Expr3;
separator nonempty Arg "";

EmptyP. Pattern ::= Empty;
ConP.   Pattern ::= "(" QName [Pattern] ")";
IdP.    Pattern ::= QName;
HideP.  Pattern ::= "{" Pattern "}";
separator Pattern "";

position token Empty {"()"};

separator nonempty Name "";

comment "--";
comment "{-#";
-- comment "{-" "-}";
